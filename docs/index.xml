<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Melon Bolg</title>
    <link>https://melonyii.github.io/blog/</link>
    <description>Recent content on Melon Bolg</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 08 Feb 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://melonyii.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>将blog从jekyll迁移至hugo</title>
      <link>https://melonyii.github.io/blog/post/2018-02-09-%E8%BF%81%E7%A7%BBblog/</link>
      <pubDate>Thu, 08 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://melonyii.github.io/blog/post/2018-02-09-%E8%BF%81%E7%A7%BBblog/</guid>
      <description>之前的blog一直在写，但是没有更新。最近想更新的时候才想起来jekyll环境是在我另一台电脑上的。因此将blog换到环境简便的hugo Usage hugo</description>
    </item>
    
    <item>
      <title>python meta 探索</title>
      <link>https://melonyii.github.io/blog/post/2017-12-15-django-meta/</link>
      <pubDate>Fri, 15 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://melonyii.github.io/blog/post/2017-12-15-django-meta/</guid>
      <description>最开始是想了解一下Django框架的ORM是如何实现的。发现其实涉及到的一个重要知识点就是meta。本人python并没有非常系统的学习，于</description>
    </item>
    
    <item>
      <title>通过Docker部署Flask和Django应用实践</title>
      <link>https://melonyii.github.io/blog/post/2017-08-31-docker-%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Thu, 31 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://melonyii.github.io/blog/post/2017-08-31-docker-%E5%AE%9E%E8%B7%B5/</guid>
      <description>这里假设，你已经有一个flask或者django项目，并且能够在主机上面成功部署。现在你想迁移到docker环境中。这篇文章可以给你一定的参</description>
    </item>
    
    <item>
      <title>在开发中使用fetch跨域中碰到的问题</title>
      <link>https://melonyii.github.io/blog/post/2017-02-14-fetch-%E8%B7%A8%E5%9F%9F/</link>
      <pubDate>Tue, 14 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://melonyii.github.io/blog/post/2017-02-14-fetch-%E8%B7%A8%E5%9F%9F/</guid>
      <description>CORS（Cross-origin resource sharing） “跨域资源共享” 后端接口中，需要进行权限校验，分别放在了headers中的 authorization 与Conte</description>
    </item>
    
    <item>
      <title>Sequel 使用中碰到的一些问题</title>
      <link>https://melonyii.github.io/blog/post/2017-02-08-sequel%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 08 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://melonyii.github.io/blog/post/2017-02-08-sequel%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</guid>
      <description>在使用Sequel连接数据库的时候，采用ssh方式连接的过程中，碰到Permissions 0644 for &#39;/Users/melonyii/Documents/pem/xxx.pem&#39; are too open.,显然是没有权限了。由于都是在</description>
    </item>
    
    <item>
      <title>datadog 监控docker中Django应用</title>
      <link>https://melonyii.github.io/blog/post/2018-01-26-datadog-django/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://melonyii.github.io/blog/post/2018-01-26-datadog-django/</guid>
      <description>使用datadog中的apm监控容器中django应用 由于最近工作需要，了解了一下Datadog。照着文档对cassandraDjango进</description>
    </item>
    
    <item>
      <title>记一次python apscheduler 内存泄漏</title>
      <link>https://melonyii.github.io/blog/post/2018-01-05-python-apscheduler-memory-leak/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://melonyii.github.io/blog/post/2018-01-05-python-apscheduler-memory-leak/</guid>
      <description>记一次python apscheduler 内存泄漏 场景</description>
    </item>
    
    <item>
      <title>记一次webpack 打包优化</title>
      <link>https://melonyii.github.io/blog/post/2018-01-03-webpack-optimize/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://melonyii.github.io/blog/post/2018-01-03-webpack-optimize/</guid>
      <description>记一次webpack 打包优化 场景 我们公司所有产品的后台都是在一个前端项目中，so 我们的项目越来越大。从开始打包的几个文件，几分钟到后来几百个</description>
    </item>
    
  </channel>
</rss>