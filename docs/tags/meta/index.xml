<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Meta on Melon Bolg</title>
    <link>https://melonyii.github.io/blog/tags/meta/</link>
    <description>Recent content in Meta on Melon Bolg</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 15 Dec 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://melonyii.github.io/blog/tags/meta/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>python meta 探索</title>
      <link>https://melonyii.github.io/blog/post/2017-12-15-django-meta/</link>
      <pubDate>Fri, 15 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://melonyii.github.io/blog/post/2017-12-15-django-meta/</guid>
      <description>最开始是想了解一下Django框架的ORM是如何实现的。发现其实涉及到的一个重要知识点就是meta。本人python并没有非常系统的学习，于是决定探一探python的meta。
引子 Python 中的一切都是对象，包括类也是对象。大家有没有好奇，那类的类是什么呢？代码告诉你。
a = 1 a.__class__ # int type(a) # int class A(object): pass A.__class__ # type A.__class__.__class__ # type type(A) # type  控制台中输出的type和查看类型的type的功能可不一样。类的类其实就是元类。
type 能力 type除了我们常用的返回对象的类型外，还有一个功能。它能动态的创建类。
type(类名, 父类的元组（针对继承的情况，可以为空），包含属性的字典（名称和值）)  以下两段代码是等价的，
class MyShinyClass(object): pass MyShinyClass = type(&#39;MyShinyClass&#39;, (), {})  当我们使用 class 来创建类的时候，Python 实际上就是用 type 来创建类的，这种方式主要是通过元类(meta class)来实现的。
什么是 meta class 在创建类的时候，有一个特殊的属性(__metaclass__)，可以用函数或者类来指定元类。
class Foo(object): __metaclass__ = something  上述代码会使用something来创建类。
class Foo(Bar): pass  如果是上述代码创建类，python将做如下动作：
 Foo中有__metaclass__这个属性吗？如果是，Python会在内存中通过__metaclass__创建一个名字为Foo的类对象（我说的是类对象，请紧跟我的思路）。 如果Python没有找到__metaclass__，它会继续在Bar（父类）中寻找__metaclass__属性，并尝试做和前面同样的操作。 如果Python在任何父类中都找不到__metaclass__，它就会在模块层次中去寻找__metaclass__，并尝试做同样的操作。 如果还是找不到__metaclass__,Python就会用内置的type来创建这个类对象。  自定义元类 我们自定义元类的主要目的就是为了当创建类时能够自动地改变类。通常，你会为API做这样的事情。假想一个很傻的例子，你决定在你的模块里所有的类的属性都应该是大写形式。有好几种方法可以办到，但其中一种就是通过在模块级别设定__metaclass__。采用这种方法，这个模块中的所有类都会通过这个元类来创建，我们只需要告诉元类把所有的属性都改成大写形式就万事大吉了。</description>
    </item>
    
  </channel>
</rss>